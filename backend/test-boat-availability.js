// Test des disponibilit√©s dans le mod√®le Boat
import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/sailingloc';

async function testBoatAvailability() {
  console.log('üß™ Test des disponibilit√©s dans le mod√®le Boat...\n');

  try {
    // Connexion √† MongoDB
    console.log('1. Connexion √† MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connexion r√©ussie √† MongoDB\n');

    // V√©rifier les collections existantes
    console.log('2. Collections existantes:');
    const collections = await mongoose.connection.db.listCollections().toArray();
    collections.forEach(collection => {
      console.log(`   - ${collection.name}`);
    });
    console.log('');

    // Importer le mod√®le Boat
    console.log('3. Test du mod√®le Boat...');
    const { default: Boat } = await import('./models/Boat.js');
    
    // Compter les bateaux
    const boatCount = await Boat.countDocuments();
    console.log(`   Nombre total de bateaux: ${boatCount}`);

    if (boatCount > 0) {
      console.log('\n4. D√©tail des bateaux avec disponibilit√©s:');
      const boats = await Boat.find().select('nom availability');
      
      boats.forEach((boat, index) => {
        console.log(`   ${index + 1}. Bateau: ${boat.nom}`);
        if (boat.availability && boat.availability.startDate) {
          console.log(`      Disponibilit√©: ${boat.availability.startDate.toLocaleDateString()} - ${boat.availability.endDate.toLocaleDateString()} (${boat.availability.price}‚Ç¨)`);
          if (boat.availability.notes) {
            console.log(`      Notes: ${boat.availability.notes}`);
          }
        } else {
          console.log(`      Aucune disponibilit√©`);
        }
        console.log('');
      });
    } else {
      console.log('\n4. Aucun bateau trouv√© dans la base de donn√©es');
    }

    // Test de cr√©ation d'un bateau avec disponibilit√©
    console.log('5. Test de cr√©ation d\'un bateau avec disponibilit√©...');
    const testBoat = new Boat({
      nom: 'Bateau Test',
      type: 'voilier',
      longueur: 10,
      prix_jour: 150,
      capacite: 6,
      image: 'https://example.com/test.jpg',
      destination: 'saint-malo',
      description: 'Bateau de test',
      equipements: ['GPS', 'Radio'],
      availability: {
        startDate: new Date('2024-12-01'),
        endDate: new Date('2024-12-07'),
        price: 150,
        notes: 'Test de disponibilit√©'
      },
      proprietaire: new mongoose.Types.ObjectId()
    });

    // Valider le document
    await testBoat.validate();
    console.log('‚úÖ Validation du mod√®le Boat avec disponibilit√© r√©ussie');
    
    // Ne pas sauvegarder le bateau de test
    console.log('‚ÑπÔ∏è Bateau de test non sauvegard√© (validation uniquement)');

    console.log('\n‚úÖ Tests termin√©s avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  } finally {
    // Fermer la connexion
    await mongoose.connection.close();
    console.log('\nüîå Connexion ferm√©e');
  }
}

// Ex√©cuter les tests
testBoatAvailability();
